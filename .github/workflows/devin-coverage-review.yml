name: Automated Test Coverage Suggestions

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  validate-pr-qualification:
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.check-qualification.outputs.should_proceed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR qualification
        id: check-qualification
        run: |
          # Get PR details
          PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")
          
          # Extract relevant information
          IS_DRAFT=$(echo "$PR_INFO" | jq -r '.draft')
          CHANGED_FILES=$(echo "$PR_INFO" | jq -r '.changed_files')
          ADDITIONS=$(echo "$PR_INFO" | jq -r '.additions')
          DELETIONS=$(echo "$PR_INFO" | jq -r '.deletions')
          TOTAL_CHANGES=$((ADDITIONS + DELETIONS))
          
          # Define thresholds
          MAX_FILES=10
          MAX_CHANGES=500
          
          # Initialize qualification flag
          SHOULD_PROCEED=true
          DISQUALIFICATION_REASON=""
          
          # Check if PR is in draft mode
          if [ "$IS_DRAFT" = "true" ]; then
            SHOULD_PROCEED=false
            DISQUALIFICATION_REASON="PR is in draft mode"
          fi
          
          # Check number of changed files
          if [ "$CHANGED_FILES" -gt "$MAX_FILES" ]; then
            SHOULD_PROCEED=false
            DISQUALIFICATION_REASON="Too many files changed (max: $MAX_FILES, actual: $CHANGED_FILES)"
          fi
          
          # Check total number of changes
          if [ "$TOTAL_CHANGES" -gt "$MAX_CHANGES" ]; then
            SHOULD_PROCEED=false
            DISQUALIFICATION_REASON="Too many line changes (max: $MAX_CHANGES, actual: $TOTAL_CHANGES)"
          fi
          
          # Get PR title
          PR_TITLE=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | \
            jq -r '.title')
          
          # Convert PR title to lowercase for case-insensitive match
          if echo "$PR_TITLE" | tr '[:upper:]' '[:lower:]' | grep -q "devin-test"; then
            echo "PR title contains 'Devin-test', skipping Devin session creation"
            SHOULD_PROCEED=false
            DISQUALIFICATION_REASON="PR title contains 'Devin-test', skipping Devin session creation since its already a Devin Test generation PR."
          fi

          # Set outputs
          echo "should_proceed=$SHOULD_PROCEED" >> $GITHUB_OUTPUT
          
          # Add comment to PR if disqualified
          if [ "$SHOULD_PROCEED" = "false" ]; then
            COMMENT="🤖 Automated Test Generation Skipped\n\nReason: $DISQUALIFICATION_REASON\n\nRequirements:\n- PR must not be in draft mode\n- Maximum $MAX_FILES files can be changed\n- Maximum $MAX_CHANGES total line changes"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"body\":\"$COMMENT\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          fi

  coverage-suggestions:
    needs: validate-pr-qualification
    if: needs.validate-pr-qualification.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      devin_pr_number: ${{ steps.devin-coverage.outputs.devin_pr_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR files
        id: pr-files
        run: |
          # Get PR files with proper error handling
          API_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files")
          
          # Debug: Print the API response
          echo "API Response: $API_RESPONSE"
          
          # Check if the response is an array (successful) or contains an error
          if echo "$API_RESPONSE" | jq -e 'type == "array"' > /dev/null 2>&1; then
            FILES=$(echo "$API_RESPONSE" | jq -r '[.[].filename] | @json')
            echo "Successfully retrieved files: $FILES"
          else
            echo "Error: API response is not an array. Response: $API_RESPONSE"
            # Fallback: use git to get changed files
            FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | jq -R -s -c 'split("\n")[:-1]')
            echo "Using git fallback for files: $FILES"
          fi
          
          echo "files=$FILES" >> $GITHUB_OUTPUT

      - name: Create and Monitor Devin Coverage Session
        id: devin-coverage
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          FILES_TO_REVIEW: ${{ steps.pr-files.outputs.files }}
          MAX_POLLING_TIME: 10800
          POLL_INTERVAL: 30
          COVERAGE_PROMPT: |
            You are PR Coverage Reviewer Devin. Your task is to review the following pull request and suggest improvements to test coverage.
            --user-afk

            Repository: ${{ github.repository }}
            Initial PR Number: ${{ github.event.pull_request.number }}

            Files to review:
            ${{ steps.pr-files.outputs.files }}

            Your tasks:
            1. Review the changes in the PR files
            2. Analyze test coverage in the changed files
            3. Suggest improvements to increase test coverage by increasing coverage in the current session and reporting back the new successful coverage for the introduced changes in the comments of ${{ github.event.pull_request.number }} pr along with the current session link/url.
               Consider Adding:
                - Missing test cases
                - Edge cases not covered
                - Integration test opportunities
                - Mocking strategies
            4. Create a new PR for the new increased coverage in session with PR title "test: Devin-test - {...rest of the title description}"
            5. Return the PR number in chat as text in this exact format: PR#{number}, e.g. PR#53

            Guidelines:
            - Focus on meaningful test coverage
            - Suggest specific test scenarios
            - Consider both unit and integration tests
            - IMPORTANT: All test files must be created within the packages/app-store/zoomvideo/lib/ directory
        run: |
         # Function to check session status
          check_session_status() {
            local session_id=$1
            curl -s -H "Authorization: Bearer $DEVIN_API_KEY" \
                 -H "Content-Type: application/json" \
                 "https://api.devin.ai/v1/session/${session_id}"
          }
          
          # Function to send "SLEEP" message to a session
          sleep_session() {
            local session_id=$1
            curl -s -X POST \
                 -H "Authorization: Bearer $DEVIN_API_KEY" \
                 -H "Content-Type: application/json" \
                 -d '{"message": "SLEEP"}' \
                 "https://api.devin.ai/v1/session/${session_id}/message"
          }
          
          # Get PR title
          PR_TITLE=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | \
            jq -r '.title')
          
          # Convert PR title to lowercase for case-insensitive match
          if echo "$PR_TITLE" | tr '[:upper:]' '[:lower:]' | grep -q "devin-test"; then
            echo "PR title contains 'Devin-test', skipping Devin session creation"
            exit 0
          fi
          
          # Convert multiline string to JSON-safe format
          ESCAPED_PROMPT=$(echo "$COVERAGE_PROMPT" | jq -Rs .)
          
          # Number of Devin sessions to create
          N=2  # You can adjust this value as needed
          
          # Arrays to store session details
          SESSION_IDS=()
          SESSION_URLS=()
          
          # Create N Devin sessions
          for ((i = 1; i <= N; i++)); do
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $DEVIN_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{\"prompt\": $ESCAPED_PROMPT}" \
              "https://api.devin.ai/v1/sessions")
            
            # Check for errors in session creation
            if [ "$(echo "$RESPONSE" | jq -r '.error')" != "null" ]; then
              echo "Error creating Devin session: $(echo "$RESPONSE" | jq -r '.error')"
              exit 1
            fi
            
            # Extract session information
            SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id')
            SESSION_URL=$(echo "$RESPONSE" | jq -r '.url')
            
            SESSION_IDS+=("$SESSION_ID")
            SESSION_URLS+=("$SESSION_URL")
            
            echo "Created session $i with ID: $SESSION_ID, URL: $SESSION_URL"
          done
          
          # Poll all sessions concurrently
          START_TIME=$(date +%s)
          CURRENT_TIME=$(date +%s)
          FINISHED_SESSION=""
          while [ $((CURRENT_TIME - START_TIME)) -lt $MAX_POLLING_TIME ]; do
            for i in "${!SESSION_IDS[@]}"; do
              SESSION_ID="${SESSION_IDS[i]}"
              if [ -z "$SESSION_ID" ]; then
                continue  # Skip if the session is already marked as finished
              fi
              
              STATUS_RESPONSE=$(check_session_status "$SESSION_ID")
              STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status_enum')
              
              echo "Session $SESSION_ID status: $STATUS"
              
              if [[ "$STATUS" == "blocked" || "$STATUS" == "stopped" || "$STATUS" == "finished" ]]; then
                echo "Session $SESSION_ID finished with status: $STATUS"
                FINISHED_SESSION="$SESSION_ID"
                echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT
                echo "session-url=${SESSION_URLS[i]}" >> $GITHUB_OUTPUT
                echo "session-status=$STATUS" >> $GITHUB_OUTPUT
              
                # Attempt to extract PR number, handle gracefully if not found
                PR_NUMBER=$(echo "$STATUS_RESPONSE" | jq -r '.structured_output' | grep -oP 'PR#\K\d+')
                if [ -n "$PR_NUMBER" ]; then
                  echo "PR number extracted: $PR_NUMBER"
                  echo "devin_pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
                else
                  echo "PR number not found in response. Returning session URL instead."
                  echo "Session URL: ${SESSION_URLS[i]}"
                fi
                
                break 2  # Exit both loops once a session finishes
              fi
            done
            # Wait before next poll
            sleep $POLL_INTERVAL
            CURRENT_TIME=$(date +%s)
          done
          
          if [ -z "$FINISHED_SESSION" ]; then
            echo "Polling timed out after ${MAX_POLLING_TIME} seconds"
            exit 1
          fi
          
          # Send "SLEEP" message to other sessions
          for i in "${!SESSION_IDS[@]}"; do
            SESSION_ID="${SESSION_IDS[i]}"
            if [ "$SESSION_ID" != "$FINISHED_SESSION" ]; then
              echo "Putting session $SESSION_ID to sleep"
              sleep_session "$SESSION_ID"
            fi
          done
          
          echo "All other sessions have been put to sleep."
          exit 0

  validate-test-paths:
    needs: [validate-pr-qualification, coverage-suggestions]
    if: ${{ always() && needs.validate-pr-qualification.outputs.should_proceed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate test file paths
        env:
          ALLOWED_TEST_PATH: "packages/app-store/zoomvideo/lib/"
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          DEVIN_PR: ${{ needs.coverage-suggestions.outputs.devin_pr_number }}
        run: |
          if [ -z "$DEVIN_PR" ]; then
            echo "NO PR NUMBER RECIEVED"
            exit 1
          fi
          PR_FILES=$(curl -s -H "Authorization: token $GIT_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$DEVIN_PR/files")
          
          INVALID_FILES=$(echo "$PR_FILES" | jq -r '.[] | select(.filename | startswith("'"$ALLOWED_TEST_PATH"'") | not) | .filename')
          
          if [ ! -z "$INVALID_FILES" ]; then
            echo "❌ Files outside allowed directory: $INVALID_FILES"
            curl -X POST \
              -H "Authorization: token $GIT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"body\":\"❌ **Test Path Validation Failed**\n\nFiles outside \`$ALLOWED_TEST_PATH\`:\n\`\`\`\n$INVALID_FILES\n\`\`\`\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
            exit 1
          fi
          
          echo "✅ All test files are in the correct directory"
